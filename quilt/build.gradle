plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
}

repositories {
    maven { url "https://maven.quiltmc.org/repository/release/" }
}

architectury {
    platformSetupLoomIde()
    loader("quilt")
}

loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentQuilt.extendsFrom common
}

dependencies {
    modImplementation "org.quiltmc:quilt-loader:${rootProject.quilt_loader_version}"
    modApi "org.quiltmc.quilted-fabric-api:quilted-fabric-api:${rootProject.quilt_fabric_api_version}"
    // Remove the next few lines if you don't want to depend on the API
//    modApi("dev.architectury:architectury-fabric:${rootProject.architectury_version}") {
//        // We must not pull Fabric Loader from Architectury Fabric
//        exclude group: "net.fabricmc"
//        exclude group: "net.fabricmc.fabric-api"
//    }

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionQuilt")) { transitive false }
    common(project(path: ":fabric-like", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":fabric-like", configuration: "transformProductionQuilt")) { transitive false }

    modImplementation("me.shedaniel.cloth:cloth-config-fabric:${rootProject.cloth_config}"){
        exclude(group: "net.fabricmc.fabric-api")
    }

    modImplementation "io.wispforest:owo-lib:${rootProject.owo_version}"

    modLocalRuntime("maven.modrinth:ferrite-core:${rootProject.ferrite_core}-fabric")
    modLocalRuntime("maven.modrinth:starlight:${rootProject.starlight}")

    //modLocalRuntime("maven.modrinth:lithium:${rootProject.lithium}")

    modLocalRuntime("maven.modrinth:sodium:${rootProject.sodium}")

    implementation 'org.joml:joml:1.10.2'
    modLocalRuntime 'org.joml:joml:1.10.2'

    modCompileOnly("com.terraformersmc:modmenu:${rootProject.modmenu}")
    modLocalRuntime("com.terraformersmc:modmenu:${rootProject.modmenu}")
}

processResources {
    inputs.property "group", rootProject.maven_group
    inputs.property "version", project.version

    filesMatching("quilt.mod.json") {
        expand "group": rootProject.maven_group,
                "version": project.version
    }
}

shadowJar {
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    classifier "quilt-dev-shadow"
}

remapJar {
    injectAccessWidener = true
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    classifier "quilt"
}

jar {
    classifier "quilt-dev"
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
    classifier "quilt-sources"
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

def ENV = System.getenv()

//publishing {
//    publications {
//        mavenQuilt(MavenPublication) {
//            artifactId = rootProject.archives_base_name + "-" + project.name
//            from components.java
//        }
//    }
//
//    repositories {
//        maven {
//            url ENV.MAVEN_URL
//
//            credentials {
//                username ENV.MAVEN_USER
//                password ENV.MAVEN_PASSWORD
//            }
//        }
//    }
//}
