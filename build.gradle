plugins {
	id 'fabric-loom' version '0.11-SNAPSHOT'
	id 'maven-publish'
	id 'io.github.juuxel.loom-quiltflower' version '1.7.2'
}

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

repositories {
	maven { url 'https://maven.wispforest.io' }
	maven { url "https://maven.shedaniel.me/" }
	maven {
		name = "Modrinth"
		url = "https://api.modrinth.com/maven"
		content {
			includeGroup "maven.modrinth"
		}
	}
}

dependencies {
	// To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	// Fabric API. This is technically optional, but you probably want it anyway.
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

	modImplementation "io.wispforest:owo-lib:${project.owo_version}"

	modImplementation("me.shedaniel.cloth:cloth-config-fabric:${project.cloth_config}"){
		exclude(group: "net.fabricmc.fabric-api")
	}

	modLocalRuntime("maven.modrinth:ferrite-core:${project.ferrite_core}-fabric")
	modLocalRuntime("maven.modrinth:starlight:${project.starlight}")

	modLocalRuntime("maven.modrinth:lithium:${project.lithium}")

	modLocalRuntime("maven.modrinth:sodium:${project.sodium}")

	implementation 'org.joml:joml:1.10.2'
	modLocalRuntime 'org.joml:joml:1.10.2'

	modCompileOnly("maven.modrinth:modmenu:${project.modmenu}")
	modLocalRuntime("maven.modrinth:modmenu:${project.modmenu}")
}

loom {
	accessWidenerPath = file("src/main/resources/condensed_creative.accesswidener")
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile).configureEach {
	// Minecraft 1.18 (1.18-pre2) upwards uses Java 17.
	it.options.release = 17
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.archivesBaseName}"}
	}
}

def ENV = System.getenv()

// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}

	repositories {
		maven {
			url ENV.MAVEN_URL

			credentials {
				username ENV.MAVEN_USER
				password ENV.MAVEN_PASSWORD
			}
		}
	}
}
